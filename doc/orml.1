.TH orml 1 "2016-12-21 22:37" "0.4"
.SH NAME
orml - orml rules many lands.
.SH SYNOPSIS
.I orml
.B [--secret
.I [length]
.B | --as
.I [key]
.B | --password
.B | --encrypt
.B | --decrypt
.B | --clipboard
.B | --null]
.B [insert
.I [output] [input]
.B | select
.I [input]
.B | hide
.I [input]
.B | unhide
.I [input]
.B | import
.I [input]
.B | list
.I [@hidden | [input | []]]
.B | export
.B | install]
.I [arguments...]

.SH DESCRIPTION
Think of it like `pass`, except with more features and a more maintainable
codebase. `orml` is a password/data manager which allows for
various additional security and convenience features.

.SH COMMANDS
.TP
.B install
If you haven't read this #installing section in the README, I recommend it.

.TP
.BI insert " [path] [- | *]"
Insert and encrypt a new file, text message or secure/private key. The key used
to encrypt this entry is taken from ~/.orml/keys by default, it will take the
first line in the file. This is also the way for you to set a preference on
which key to use. You can specify a key which will overwrite the preference
with `--as [key]`.

There are multiple ways to provide insert with data, this is done by changing
the second argument.

  * Omitting it, which will spawn a prompt. This prompt will not visibly hide user input
    without the `--password` flag
  * Supplying a single dash, telling `orml` to read from standard input instead
    of using the arguments
  * Specifying the `--secret [length]` flag, this will use a /dev/urandom string
    using the printable ascii character set and the provided length
  * Anything else which doesn't apply to the previous clauses is initially
    treated as a file path. If this ends up not being a valid path, it is interpret
    as text.

.TP
.BI select " [path]"
Select and decrypt a existing entry. You don't need to specify a key, gpg will
identify if the required key is available by itself. It is possible to suppress
any output to standard output with the `--null` flag. Additionally you can use
the `--clipboard` flag to copy the contents of entry to your clipboard.

.TP
.BI list " [@hidden | [pattern | []]]"
List entries optionally based on the provided argument.

  * When no arguments are specified, all of the entries will be list
  * When a single argument matching `@hidden` is specified, only ~/.orml/.hidden will be listed
  * Any other arguments will be used to pattern match entries, and list those exclusively

.TP
.BI export " [path]"
Export everything in ~/.orml by making it a tarball, writing it to the provided file.
You can additionally encrypt it with the `--encrypt` flag, this can be used in
combination with the `--as [key]`.

.TP
.BI drop " [path]"
Drop the matching entry, hidden entry or directory. This will prompt a
confirmation which can optionally be skipped with `--force`.

.TP
.BI move " [from] [to]"
Move the first entry to the second location. When the second location exists,
a prompt will appear which can be skipped with `--force`.

.TP
.BI hide " [path]"
.B hide
Hide the matching entry. the file is then moved to ~/.orml/hidden with the hash
of the relative path as its new filename. You can still access this entry like
you normally would with select.

.TP
.BI unhide " [path]"
Unhide the matching hidden entry by replacing the hash with the provided matching
relative path, it will be interpret the same way it was set initially.

.TP
.BI import " [store]"
Import a tarball or gpg file resembling a logical ordering structure. All found
directories are created or reused dependent on the existing directories in ~/.orml.
All the new files found are added, the duplicate files will be overwritten by their
import. When a gpg file is provided
.I without
extension, you need to tell `orml` to decrypt it first by specifying the
`--decrypt` flag.

.TP
.B version
Display the current version.

.SH BUGS
Anything that isn't like it should be can be submitted as an issue. This
including additional features, a different implementation of a existing
functionality and typo's.

.SH AUTHOR
Mirko van der Waal <mvdw at airmail dot cc>
